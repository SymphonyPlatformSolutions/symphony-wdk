# Release any branch to Maven Central.
# This workflow currently assumes that the target branch is ready to be release (i.e. version is correct)

name: Release
on:
  release:
    types: [ published ]

jobs:
  build:
    name: "Release"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 11

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
          cache-dependency-path: studio/web/yarn.lock

      - run: cd studio/web && yarn install && yarn build && cp -r dist ../src/main/resources/static/

      - name: Configure signing
        run: |
          printf "$GPG_KEY_BASE64" | base64 --decode > secring.gpg
        env:
          GPG_KEY_BASE64: ${{ secrets.GPG_KEY_BASE64 }}

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          mkdir -p ~/.gnupg/
          printf "$GPG_KEY_BASE64" | base64 --decode > ~/.gnupg/secring.gpg
          ./gradlew build -x test
          ./gradlew -PmavenRepoUsername=${{ secrets.MAVEN_USERNAME }} -PmavenRepoPassword=${{ secrets.MAVEN_PASSWORD }} -Psigning.keyId=${{ secrets.GPG_KEY_ID }} -Psigning.secretKeyRingFile=${{ github.workspace }}/secring.gpg -Psigning.password=${{ secrets.GPG_KEY_PASSPHRASE }} publishToSonatype closeAndReleaseStagingRepository

      - name: Upload fatJar artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          path: workflow-bot-app/build/libs/*boot*jar
          if-no-files-found: error
          retention-days: 1

      - name: Upload studio artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: lib
          path: studio/lib/*.jar
          if-no-files-found: error
          retention-days: 1

  build-federation:
    name: "Build Federation JAR"
    needs: build
    runs-on: ubuntu-latest
    env:
      VERSION: 1.0.5
    steps:
      - uses: actions/checkout@v3
        with:
          repository: symphonyplatformsolutions/wdk-federation-client
          ref: ${{ env.VERSION }}

      - uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Rename Federation JAR
        run: mv lib/symphony-wdk.jar lib/wdk-federation-client-${VERSION}.jar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: federation
          path: lib/*.jar
          if-no-files-found: error
          retention-days: 1

  build-and-push-image:
    name: "Push Docker Image"
    needs: build-federation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: .

      - run: mkdir studio/lib && cp federation/*.jar studio/lib/ && cp lib/*.jar studio/lib/

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: finos
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: finos/symphony-wdk

      - name: Build and push WDK Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_studio
        uses: docker/metadata-action@v4
        with:
          images: finos/symphony-wdk-studio

      - name: Build and push Studio Docker image
        uses: docker/build-push-action@v4
        with:
          context: studio
          push: true
          tags: ${{ steps.meta_studio.outputs.tags }}
          labels: ${{ steps.meta_studio.outputs.labels }}

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
